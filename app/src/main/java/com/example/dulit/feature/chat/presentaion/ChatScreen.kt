    package com.example.dulit.feature.chat.presentaion

    import androidx.compose.foundation.background
    import androidx.compose.foundation.border
    import androidx.compose.foundation.clickable
    import androidx.compose.foundation.layout.*
    import androidx.compose.foundation.lazy.LazyColumn
    import androidx.compose.foundation.lazy.items
    import androidx.compose.foundation.lazy.rememberLazyListState
    import androidx.compose.foundation.shape.CircleShape
    import androidx.compose.foundation.shape.CornerSize
    import androidx.compose.foundation.shape.RoundedCornerShape
    import androidx.compose.foundation.text.BasicTextField
    import androidx.compose.material.icons.Icons
    import androidx.compose.material.icons.automirrored.filled.Send // [ÏàòÏ†ï] AutoMirrored ÏïÑÏù¥ÏΩò ÏÇ¨Ïö©
    import androidx.compose.material.icons.filled.Add
    import androidx.compose.material.icons.filled.MoreVert
    import androidx.compose.material3.*
    import androidx.compose.runtime.*
    import androidx.compose.ui.Alignment
    import androidx.compose.ui.Modifier
    import androidx.compose.ui.draw.clip
    import androidx.compose.ui.draw.shadow
    import androidx.compose.ui.graphics.Brush
    import androidx.compose.ui.graphics.Color
    import androidx.compose.ui.graphics.SolidColor
    import androidx.compose.ui.graphics.vector.ImageVector
    import androidx.compose.ui.platform.LocalConfiguration
    import androidx.compose.ui.text.font.FontWeight
    import androidx.compose.ui.tooling.preview.Preview
    import androidx.compose.ui.unit.dp
    import androidx.compose.ui.unit.sp
    import com.example.dulit.core.ui.theme.Amber900
    import com.example.dulit.core.ui.theme.DulitTheme
    import com.example.dulit.core.ui.theme.customColorScheme
    import kotlinx.coroutines.launch

    // Data classes remain the same...
    data class ChatMessage(
        val text: String,
        val isMe: Boolean,
        val time: String,
    )

    private val sampleMessages = listOf(
        ChatMessage("ÏïàÎÖïÌïòÏÑ∏Ïöî! Ïò§Îäò Î≠êÌïòÍ≥† ÏûàÏñ¥Ïöî?", isMe = false, time = "Ïò§Ï†Ñ 10:30"),
        ChatMessage("ÏïàÎÖï! ÎÇò ÏßÄÍ∏à Ïπ¥ÌéòÏóêÏÑú Í≥µÎ∂ÄÌïòÍ≥† ÏûàÏñ¥ ‚òï", isMe = true, time = "Ïò§Ï†Ñ 10:32"),
        // ...
    )

    @Composable
    fun ChatScreen() {
        // [ÏàòÏ†ï] DulitThemeÏúºÎ°ú Í∞êÏã∏ÏÑú ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú Ï†ÅÏö©
        DulitTheme {
            var messages by remember { mutableStateOf(sampleMessages) }
            val listState = rememberLazyListState()
            val coroutineScope = rememberCoroutineScope()

            Surface(modifier = Modifier.fillMaxSize()) {
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        // [ÏàòÏ†ï] Ïª§Ïä§ÌÖÄ Í∑∏ÎùºÎç∞Ïù¥ÏÖò Î∞∞Í≤Ω Ï†ÅÏö©
                        .background(brush = MaterialTheme.customColorScheme.gradientBackground)
                ) {
                    ChatHeader()
                    LazyColumn(
                        state = listState,
                        modifier = Modifier.weight(1f),
                        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 8.dp)
                    ) {
                        item { DateDivider("Ïò§Îäò") }
                        items(messages) { message -> MessageItem(message) }
                    }
                    MessageInput { text ->
                        messages = messages + ChatMessage(text, isMe = true, time = "ÏßÄÍ∏à")
                        coroutineScope.launch { listState.animateScrollToItem(messages.size) }
                    }
                }
            }
        }
    }

    @Composable
    private fun ChatHeader() {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .shadow(elevation = 4.dp, spotColor = MaterialTheme.colorScheme.outlineVariant)
                .background(MaterialTheme.colorScheme.surface)
                .padding(horizontal = 16.dp, vertical = 12.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Box(
                modifier = Modifier
                    .size(32.dp)
                    .background(MaterialTheme.colorScheme.secondaryContainer, CircleShape),
                contentAlignment = Alignment.Center
            ) {
                // Icon(...) // Îí§Î°úÍ∞ÄÍ∏∞ ÏïÑÏù¥ÏΩò
            }
            Spacer(modifier = Modifier.width(12.dp))
            Box(
                modifier = Modifier
                    .size(40.dp)
                    .background(MaterialTheme.colorScheme.primaryContainer, CircleShape)
                    .border(2.dp, MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.5f), CircleShape),
                contentAlignment = Alignment.Center
            ) {
                Text("üíë", style = MaterialTheme.typography.bodyLarge)
            }
            Spacer(modifier = Modifier.width(12.dp))
            Column(modifier = Modifier.weight(1f)) {
                Text(
                    text = "ÏÇ¨ÎûëÌïòÎäî Ïö∞Î¶¨ üíï",
                    // [ÏàòÏ†ï] ÌÖåÎßà Ïä§ÌÉÄÏùº Î∞è ÏÉâÏÉÅ Ï†ÅÏö©
                    style = MaterialTheme.typography.titleSmall,
                    color = MaterialTheme.colorScheme.secondary
                )
                Spacer(modifier = Modifier.height(2.dp))
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Box(
                        modifier = Modifier
                            .size(8.dp)
                            .background(MaterialTheme.customColorScheme.success, CircleShape)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Text(
                        text = "Ïò®ÎùºÏù∏",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }
            IconButton(onClick = { /*TODO*/ }) {
                Icon(
                    Icons.Default.MoreVert,
                    contentDescription = "ÎçîÎ≥¥Í∏∞",
                    tint = MaterialTheme.colorScheme.secondary
                )
            }
        }
    }

    @Composable
    private fun DateDivider(date: String) {
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier.padding(vertical = 16.dp)
        ) {
            Divider(modifier = Modifier.weight(1f), color = MaterialTheme.colorScheme.outline)
            Box(
                modifier = Modifier
                    .padding(horizontal = 12.dp)
                    .border(1.dp, MaterialTheme.colorScheme.primaryContainer, RoundedCornerShape(12.dp))
                    .background(MaterialTheme.colorScheme.secondaryContainer, RoundedCornerShape(12.dp))
                    .padding(horizontal = 12.dp, vertical = 6.dp)
            ) {
                Text(
                    text = date,
                    style = MaterialTheme.typography.bodySmall.copy(fontWeight = FontWeight.W500),
                    color = MaterialTheme.colorScheme.secondary
                )
            }
            Divider(modifier = Modifier.weight(1f), color = MaterialTheme.colorScheme.outline)
        }
    }

    @Composable
    private fun MessageItem(message: ChatMessage) {
        Row(
            modifier = Modifier.fillMaxWidth().padding(vertical = 6.dp),
            horizontalArrangement = if (message.isMe) Arrangement.End else Arrangement.Start,
            verticalAlignment = Alignment.Bottom
        ) {
            if (!message.isMe) {
                Box(
                    modifier = Modifier
                        .size(32.dp)
                        .background(MaterialTheme.colorScheme.primaryContainer, CircleShape)
                        .border(1.5.dp, MaterialTheme.colorScheme.primaryContainer.copy(alpha=0.5f), CircleShape),
                    contentAlignment = Alignment.Center
                ) {
                    Text("üíë", style = MaterialTheme.typography.bodySmall)
                }
                Spacer(modifier = Modifier.width(8.dp))
            }
            if (message.isMe) {
                Text(
                    text = message.time,
                    style = MaterialTheme.typography.bodySmall.copy(fontSize = 10.sp),
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
                Spacer(modifier = Modifier.width(4.dp))
            }
            Box(
                modifier = Modifier
                    .widthIn(max = LocalConfiguration.current.screenWidthDp.dp * 0.65f)
                    .shadow(1.dp, RoundedCornerShape(18.dp), spotColor = MaterialTheme.colorScheme.surfaceVariant)
                    .background(
                        color = if (message.isMe) MaterialTheme.colorScheme.primaryContainer else MaterialTheme.colorScheme.surface,
                        shape = RoundedCornerShape(18.dp).copy(
                            bottomStart = if (message.isMe) RoundedCornerShape(18.dp).bottomStart else CornerSize(0.dp),
                            bottomEnd = if (message.isMe) CornerSize(0.dp) else RoundedCornerShape(18.dp).bottomEnd
                        )
                    )
                    .border(
                        width = if (message.isMe) 0.dp else 1.dp,
                        color = if (message.isMe) Color.Transparent else MaterialTheme.colorScheme.outlineVariant,
                        shape = RoundedCornerShape(18.dp).copy(
                            bottomStart = if (message.isMe) RoundedCornerShape(18.dp).bottomStart else CornerSize(0.dp),
                            bottomEnd = if (message.isMe) CornerSize(0.dp) else RoundedCornerShape(18.dp).bottomEnd
                        )
                    )
                    .padding(horizontal = 16.dp, vertical = 10.dp)
            ) {
                Text(
                    text = message.text,
                    style = MaterialTheme.typography.bodyMedium,
                    color = if (message.isMe) Amber900 else MaterialTheme.colorScheme.onSurface
                )
            }
            if (!message.isMe) {
                Spacer(modifier = Modifier.width(4.dp))
                Text(
                    text = message.time,
                    style = MaterialTheme.typography.bodySmall.copy(fontSize = 10.sp),
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
        }
    }

    @Composable
    private fun MessageInput(onSend: (String) -> Unit) {
        var text by remember { mutableStateOf("") }

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .shadow(elevation = 4.dp, spotColor = MaterialTheme.colorScheme.outlineVariant)
                .background(MaterialTheme.colorScheme.surface)
                .padding(horizontal = 16.dp, vertical = 12.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            RoundIconButton(icon = Icons.Default.Add, onClick = { /*TODO*/ })
            Spacer(modifier = Modifier.width(8.dp))
            BasicTextField(
                value = text,
                onValueChange = { text = it },
                modifier = Modifier
                    .weight(1f)
                    .background(MaterialTheme.colorScheme.secondaryContainer, RoundedCornerShape(24.dp))
                    .border(1.dp, MaterialTheme.colorScheme.primaryContainer, RoundedCornerShape(24.dp))
                    .padding(horizontal = 16.dp, vertical = 12.dp),
                textStyle = MaterialTheme.typography.bodyMedium.copy(color = MaterialTheme.colorScheme.onBackground),
                cursorBrush = SolidColor(MaterialTheme.colorScheme.secondary),
                decorationBox = { innerTextField ->
                    if (text.isEmpty()) {
                        Text(
                            "Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî...",
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.7f)
                        )
                    }
                    innerTextField()
                }
            )
            Spacer(modifier = Modifier.width(8.dp))
            Box(
                modifier = Modifier
                    .size(40.dp)
                    .shadow(elevation = 8.dp, shape = CircleShape, spotColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.3f))
                    .background(
                        brush = Brush.verticalGradient(
                            colors = listOf(MaterialTheme.colorScheme.primary, MaterialTheme.colorScheme.primaryContainer)
                        ),
                        shape = CircleShape
                    )
                    .clip(CircleShape)
                    .clickable {
                        if (text.isNotBlank()) {
                            onSend(text)
                            text = ""
                        }
                    },
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    // [ÏàòÏ†ï] AutoMirrored ÏïÑÏù¥ÏΩòÏúºÎ°ú Î≥ÄÍ≤Ω
                    Icons.AutoMirrored.Filled.Send,
                    contentDescription = "Ï†ÑÏÜ°",
                    tint = MaterialTheme.colorScheme.onPrimary,
                    modifier = Modifier.size(20.dp)
                )
            }
        }
    }

    @Composable
    private fun RoundIconButton(icon: ImageVector, onClick: () -> Unit) {
        Box(
            modifier = Modifier
                .size(40.dp)
                .background(MaterialTheme.colorScheme.secondaryContainer, CircleShape)
                .clip(CircleShape)
                .clickable(onClick = onClick),
            contentAlignment = Alignment.Center
        ) {
            Icon(
                imageVector = icon,
                contentDescription = null,
                tint = MaterialTheme.colorScheme.secondary,
                modifier = Modifier.size(24.dp)
            )
        }
    }
